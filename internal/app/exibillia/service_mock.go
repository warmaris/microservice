// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package exibillia is a generated GoMock package.
package exibillia

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// create mocks base method.
func (m *MockStorage) create(ctx context.Context, exibillia Exibillia) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "create", ctx, exibillia)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// create indicates an expected call of create.
func (mr *MockStorageMockRecorder) create(ctx, exibillia interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockStorage)(nil).create), ctx, exibillia)
}

// delete mocks base method.
func (m *MockStorage) delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockStorageMockRecorder) delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockStorage)(nil).delete), ctx, id)
}

// getByID mocks base method.
func (m *MockStorage) getByID(ctx context.Context, id uint64) (Exibillia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getByID", ctx, id)
	ret0, _ := ret[0].(Exibillia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getByID indicates an expected call of getByID.
func (mr *MockStorageMockRecorder) getByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getByID", reflect.TypeOf((*MockStorage)(nil).getByID), ctx, id)
}

// update mocks base method.
func (m *MockStorage) update(ctx context.Context, exibillia *Exibillia) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "update", ctx, exibillia)
	ret0, _ := ret[0].(error)
	return ret0
}

// update indicates an expected call of update.
func (mr *MockStorageMockRecorder) update(ctx, exibillia interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockStorage)(nil).update), ctx, exibillia)
}
