// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: v1/acaer.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcaerServiceClient is the client API for AcaerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcaerServiceClient interface {
	CreateSimple(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTransaction(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateAggregate(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type acaerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcaerServiceClient(cc grpc.ClientConnInterface) AcaerServiceClient {
	return &acaerServiceClient{cc}
}

func (c *acaerServiceClient) CreateSimple(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/microservice.AcaerService/CreateSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acaerServiceClient) CreateTransaction(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/microservice.AcaerService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acaerServiceClient) CreateAggregate(ctx context.Context, in *CreateAcaerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/microservice.AcaerService/CreateAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcaerServiceServer is the server API for AcaerService service.
// All implementations must embed UnimplementedAcaerServiceServer
// for forward compatibility
type AcaerServiceServer interface {
	CreateSimple(context.Context, *CreateAcaerRequest) (*empty.Empty, error)
	CreateTransaction(context.Context, *CreateAcaerRequest) (*empty.Empty, error)
	CreateAggregate(context.Context, *CreateAcaerRequest) (*empty.Empty, error)
	mustEmbedUnimplementedAcaerServiceServer()
}

// UnimplementedAcaerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAcaerServiceServer struct {
}

func (UnimplementedAcaerServiceServer) CreateSimple(context.Context, *CreateAcaerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSimple not implemented")
}
func (UnimplementedAcaerServiceServer) CreateTransaction(context.Context, *CreateAcaerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedAcaerServiceServer) CreateAggregate(context.Context, *CreateAcaerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregate not implemented")
}
func (UnimplementedAcaerServiceServer) mustEmbedUnimplementedAcaerServiceServer() {}

// UnsafeAcaerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcaerServiceServer will
// result in compilation errors.
type UnsafeAcaerServiceServer interface {
	mustEmbedUnimplementedAcaerServiceServer()
}

func RegisterAcaerServiceServer(s grpc.ServiceRegistrar, srv AcaerServiceServer) {
	s.RegisterService(&AcaerService_ServiceDesc, srv)
}

func _AcaerService_CreateSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcaerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcaerServiceServer).CreateSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.AcaerService/CreateSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcaerServiceServer).CreateSimple(ctx, req.(*CreateAcaerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcaerService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcaerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcaerServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.AcaerService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcaerServiceServer).CreateTransaction(ctx, req.(*CreateAcaerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcaerService_CreateAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcaerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcaerServiceServer).CreateAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.AcaerService/CreateAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcaerServiceServer).CreateAggregate(ctx, req.(*CreateAcaerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AcaerService_ServiceDesc is the grpc.ServiceDesc for AcaerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcaerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.AcaerService",
	HandlerType: (*AcaerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSimple",
			Handler:    _AcaerService_CreateSimple_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _AcaerService_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateAggregate",
			Handler:    _AcaerService_CreateAggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/acaer.proto",
}
