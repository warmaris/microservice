// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: v1/exibillia.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExibilliaServiceClient is the client API for ExibilliaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExibilliaServiceClient interface {
	Get(ctx context.Context, in *GetExibilliaRequest, opts ...grpc.CallOption) (*GetExibilliaResponse, error)
	Create(ctx context.Context, in *CreateExibilliaRequest, opts ...grpc.CallOption) (*CreateExibilliaResponse, error)
	Update(ctx context.Context, in *UpdateExibilliaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteExibilliaRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type exibilliaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExibilliaServiceClient(cc grpc.ClientConnInterface) ExibilliaServiceClient {
	return &exibilliaServiceClient{cc}
}

func (c *exibilliaServiceClient) Get(ctx context.Context, in *GetExibilliaRequest, opts ...grpc.CallOption) (*GetExibilliaResponse, error) {
	out := new(GetExibilliaResponse)
	err := c.cc.Invoke(ctx, "/microservice.ExibilliaService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exibilliaServiceClient) Create(ctx context.Context, in *CreateExibilliaRequest, opts ...grpc.CallOption) (*CreateExibilliaResponse, error) {
	out := new(CreateExibilliaResponse)
	err := c.cc.Invoke(ctx, "/microservice.ExibilliaService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exibilliaServiceClient) Update(ctx context.Context, in *UpdateExibilliaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/microservice.ExibilliaService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exibilliaServiceClient) Delete(ctx context.Context, in *DeleteExibilliaRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/microservice.ExibilliaService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExibilliaServiceServer is the server API for ExibilliaService service.
// All implementations must embed UnimplementedExibilliaServiceServer
// for forward compatibility
type ExibilliaServiceServer interface {
	Get(context.Context, *GetExibilliaRequest) (*GetExibilliaResponse, error)
	Create(context.Context, *CreateExibilliaRequest) (*CreateExibilliaResponse, error)
	Update(context.Context, *UpdateExibilliaRequest) (*empty.Empty, error)
	Delete(context.Context, *DeleteExibilliaRequest) (*empty.Empty, error)
	mustEmbedUnimplementedExibilliaServiceServer()
}

// UnimplementedExibilliaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExibilliaServiceServer struct {
}

func (UnimplementedExibilliaServiceServer) Get(context.Context, *GetExibilliaRequest) (*GetExibilliaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExibilliaServiceServer) Create(context.Context, *CreateExibilliaRequest) (*CreateExibilliaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExibilliaServiceServer) Update(context.Context, *UpdateExibilliaRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedExibilliaServiceServer) Delete(context.Context, *DeleteExibilliaRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExibilliaServiceServer) mustEmbedUnimplementedExibilliaServiceServer() {}

// UnsafeExibilliaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExibilliaServiceServer will
// result in compilation errors.
type UnsafeExibilliaServiceServer interface {
	mustEmbedUnimplementedExibilliaServiceServer()
}

func RegisterExibilliaServiceServer(s grpc.ServiceRegistrar, srv ExibilliaServiceServer) {
	s.RegisterService(&ExibilliaService_ServiceDesc, srv)
}

func _ExibilliaService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExibilliaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExibilliaServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.ExibilliaService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExibilliaServiceServer).Get(ctx, req.(*GetExibilliaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExibilliaService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExibilliaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExibilliaServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.ExibilliaService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExibilliaServiceServer).Create(ctx, req.(*CreateExibilliaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExibilliaService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExibilliaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExibilliaServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.ExibilliaService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExibilliaServiceServer).Update(ctx, req.(*UpdateExibilliaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExibilliaService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExibilliaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExibilliaServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservice.ExibilliaService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExibilliaServiceServer).Delete(ctx, req.(*DeleteExibilliaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExibilliaService_ServiceDesc is the grpc.ServiceDesc for ExibilliaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExibilliaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.ExibilliaService",
	HandlerType: (*ExibilliaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ExibilliaService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ExibilliaService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ExibilliaService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExibilliaService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/exibillia.proto",
}
