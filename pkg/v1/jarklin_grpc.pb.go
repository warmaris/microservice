// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: v1/jarklin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JarklinService_CreateAndSend_FullMethodName = "/microservice.JarklinService/CreateAndSend"
	JarklinService_CreateAndSave_FullMethodName = "/microservice.JarklinService/CreateAndSave"
)

// JarklinServiceClient is the client API for JarklinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarklinServiceClient interface {
	CreateAndSend(ctx context.Context, in *CreateJarklinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAndSave(ctx context.Context, in *CreateJarklinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jarklinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJarklinServiceClient(cc grpc.ClientConnInterface) JarklinServiceClient {
	return &jarklinServiceClient{cc}
}

func (c *jarklinServiceClient) CreateAndSend(ctx context.Context, in *CreateJarklinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JarklinService_CreateAndSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarklinServiceClient) CreateAndSave(ctx context.Context, in *CreateJarklinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JarklinService_CreateAndSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarklinServiceServer is the server API for JarklinService service.
// All implementations must embed UnimplementedJarklinServiceServer
// for forward compatibility
type JarklinServiceServer interface {
	CreateAndSend(context.Context, *CreateJarklinRequest) (*emptypb.Empty, error)
	CreateAndSave(context.Context, *CreateJarklinRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJarklinServiceServer()
}

// UnimplementedJarklinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJarklinServiceServer struct {
}

func (UnimplementedJarklinServiceServer) CreateAndSend(context.Context, *CreateJarklinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndSend not implemented")
}
func (UnimplementedJarklinServiceServer) CreateAndSave(context.Context, *CreateJarklinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndSave not implemented")
}
func (UnimplementedJarklinServiceServer) mustEmbedUnimplementedJarklinServiceServer() {}

// UnsafeJarklinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarklinServiceServer will
// result in compilation errors.
type UnsafeJarklinServiceServer interface {
	mustEmbedUnimplementedJarklinServiceServer()
}

func RegisterJarklinServiceServer(s grpc.ServiceRegistrar, srv JarklinServiceServer) {
	s.RegisterService(&JarklinService_ServiceDesc, srv)
}

func _JarklinService_CreateAndSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJarklinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarklinServiceServer).CreateAndSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JarklinService_CreateAndSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarklinServiceServer).CreateAndSend(ctx, req.(*CreateJarklinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarklinService_CreateAndSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJarklinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarklinServiceServer).CreateAndSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JarklinService_CreateAndSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarklinServiceServer).CreateAndSave(ctx, req.(*CreateJarklinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JarklinService_ServiceDesc is the grpc.ServiceDesc for JarklinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JarklinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.JarklinService",
	HandlerType: (*JarklinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndSend",
			Handler:    _JarklinService_CreateAndSend_Handler,
		},
		{
			MethodName: "CreateAndSave",
			Handler:    _JarklinService_CreateAndSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/jarklin.proto",
}
